// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/evrintobing17/expense-management-backend/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ExpenseRepository is an autogenerated mock type for the ExpenseRepository type
type ExpenseRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *ExpenseRepository) Create(ctx context.Context, _a1 *domain.Expense) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Expense) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ExpenseRepository) FindByID(ctx context.Context, id int) (*domain.Expense, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Expense, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Expense); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: ctx, statuses
func (_m *ExpenseRepository) FindByStatus(ctx context.Context, statuses ...domain.ExpenseStatus) ([]*domain.Expense, error) {
	_va := make([]interface{}, len(statuses))
	for _i := range statuses {
		_va[_i] = statuses[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatus")
	}

	var r0 []*domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...domain.ExpenseStatus) ([]*domain.Expense, error)); ok {
		return rf(ctx, statuses...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...domain.ExpenseStatus) []*domain.Expense); ok {
		r0 = rf(ctx, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...domain.ExpenseStatus) error); ok {
		r1 = rf(ctx, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, userID, status, limit, offset
func (_m *ExpenseRepository) FindByUserID(ctx context.Context, userID int, status domain.ExpenseStatus, limit int, offset int) ([]*domain.Expense, error) {
	ret := _m.Called(ctx, userID, status, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 []*domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.ExpenseStatus, int, int) ([]*domain.Expense, error)); ok {
		return rf(ctx, userID, status, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.ExpenseStatus, int, int) []*domain.Expense); ok {
		r0 = rf(ctx, userID, status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, domain.ExpenseStatus, int, int) error); ok {
		r1 = rf(ctx, userID, status, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPendingApproval provides a mock function with given fields: ctx
func (_m *ExpenseRepository) FindPendingApproval(ctx context.Context) ([]*domain.Expense, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindPendingApproval")
	}

	var r0 []*domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Expense, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Expense); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, id, status, processedAt
func (_m *ExpenseRepository) UpdateStatus(ctx context.Context, id int, status domain.ExpenseStatus, processedAt *time.Time) error {
	ret := _m.Called(ctx, id, status, processedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.ExpenseStatus, *time.Time) error); ok {
		r0 = rf(ctx, id, status, processedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExpenseRepository creates a new instance of ExpenseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpenseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpenseRepository {
	mock := &ExpenseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
