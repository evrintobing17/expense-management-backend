// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/evrintobing17/expense-management-backend/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ApprovalRepository is an autogenerated mock type for the ApprovalRepository type
type ApprovalRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *ApprovalRepository) Create(ctx context.Context, _a1 *domain.Approval) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Approval) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByExpenseID provides a mock function with given fields: ctx, expenseID
func (_m *ApprovalRepository) FindByExpenseID(ctx context.Context, expenseID int) (*domain.Approval, error) {
	ret := _m.Called(ctx, expenseID)

	if len(ret) == 0 {
		panic("no return value specified for FindByExpenseID")
	}

	var r0 *domain.Approval
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Approval, error)); ok {
		return rf(ctx, expenseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Approval); ok {
		r0 = rf(ctx, expenseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Approval)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, expenseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApprovalRepository creates a new instance of ApprovalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApprovalRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApprovalRepository {
	mock := &ApprovalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
