// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/evrintobing17/expense-management-backend/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ExpenseUseCase is an autogenerated mock type for the ExpenseUseCase type
type ExpenseUseCase struct {
	mock.Mock
}

// ApproveExpense provides a mock function with given fields: ctx, expenseID, approverID, notes
func (_m *ExpenseUseCase) ApproveExpense(ctx context.Context, expenseID int, approverID int, notes string) error {
	ret := _m.Called(ctx, expenseID, approverID, notes)

	if len(ret) == 0 {
		panic("no return value specified for ApproveExpense")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) error); ok {
		r0 = rf(ctx, expenseID, approverID, notes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateExpense provides a mock function with given fields: ctx, userID, amountIDR, description, receiptURL
func (_m *ExpenseUseCase) CreateExpense(ctx context.Context, userID int, amountIDR int, description string, receiptURL string) (*domain.Expense, error) {
	ret := _m.Called(ctx, userID, amountIDR, description, receiptURL)

	if len(ret) == 0 {
		panic("no return value specified for CreateExpense")
	}

	var r0 *domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) (*domain.Expense, error)); ok {
		return rf(ctx, userID, amountIDR, description, receiptURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) *domain.Expense); ok {
		r0 = rf(ctx, userID, amountIDR, description, receiptURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) error); ok {
		r1 = rf(ctx, userID, amountIDR, description, receiptURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpenseByID provides a mock function with given fields: ctx, id, userID
func (_m *ExpenseUseCase) GetExpenseByID(ctx context.Context, id int, userID int) (*domain.Expense, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetExpenseByID")
	}

	var r0 *domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*domain.Expense, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *domain.Expense); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingApproval provides a mock function with given fields: ctx
func (_m *ExpenseUseCase) GetPendingApproval(ctx context.Context) ([]*domain.Expense, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingApproval")
	}

	var r0 []*domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Expense, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Expense); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserExpenses provides a mock function with given fields: ctx, userID, status, page, limit
func (_m *ExpenseUseCase) GetUserExpenses(ctx context.Context, userID int, status domain.ExpenseStatus, page int, limit int) ([]*domain.Expense, error) {
	ret := _m.Called(ctx, userID, status, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUserExpenses")
	}

	var r0 []*domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.ExpenseStatus, int, int) ([]*domain.Expense, error)); ok {
		return rf(ctx, userID, status, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.ExpenseStatus, int, int) []*domain.Expense); ok {
		r0 = rf(ctx, userID, status, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, domain.ExpenseStatus, int, int) error); ok {
		r1 = rf(ctx, userID, status, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectExpense provides a mock function with given fields: ctx, expenseID, approverID, notes
func (_m *ExpenseUseCase) RejectExpense(ctx context.Context, expenseID int, approverID int, notes string) error {
	ret := _m.Called(ctx, expenseID, approverID, notes)

	if len(ret) == 0 {
		panic("no return value specified for RejectExpense")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) error); ok {
		r0 = rf(ctx, expenseID, approverID, notes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExpenseUseCase creates a new instance of ExpenseUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpenseUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpenseUseCase {
	mock := &ExpenseUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
